const MongoClient = require('mongodb').MongoClient
const {mongoDbClientConnect} = require("../../backendFunctions/mongoHelpers")

async function getAllCollectionsInRoom(roomName) {
    // returns a list of strings for each collection a room aka db
    const [database,client] = await mongoDbClientConnect("mongodb://127.0.0.1:27017/", roomName)
    let collectionObjList = await database.listCollections().toArray()
    let collectionNameList = []
    for (let i=0; i < collectionObjList.length; i++) {
        collectionNameList.push(collectionObjList[i].name)
    }
    await client.close()
    return collectionNameList
}

async function getAllObjectsInRoom(roomName) {
    // Returns a list of all objects in a room
    let objCollections = await getAllCollectionsInRoom(roomName)
    const [database,client] = await mongoDbClientConnect("mongodb://127.0.0.1:27017/", roomName)
    let objs = []
    for (let i = 0; i < objCollections.length; i++) {
        let collection = database.collection(objCollections[i])
        let x = await collection.find().toArray()
        objs = objs.concat(x)
    }
    client.close()
    return objs
}

async function getObjByDbIdAndRoom(objDbId, roomName) {
    let objCollections = await getAllCollectionsInRoom(roomName)
    const [database,client] = await mongoDbClientConnect("mongodb://127.0.0.1:27017/", roomName)

    for (i=0; i < objCollections.length ; i++) {
        out = await database.collection(objCollections[i]).findOne({ _id: ObjectID(objDbId) })
        if (out) {
            client.close()
            return [out, objCollections[i]]
        }
    }
    client.close()
}

async function getAllImportantObjectsInRoom(roomName) {
    // returns a list of all important objects in a room
    // TODO!!!! NOT FINISHED
    let objCollections = await getAllCollectionsInRoom(roomName)
    const [database,client] = await mongoDbClientConnect("mongodb://127.0.0.1:27017/", roomName)
    let importantObjs = []
    for (let i = 0; i < objCollections.length; i++) {
        let collection = database.collection(objCollections[i])
        let x = await collection.find({important: true}).toArray()
        objs = objs.concat(x)
    }
    client.close()
    return objs
}

 async function getUserDbIdByUserId(userId) {
     /**
      * Takes a user ID string and return the userDbID associated with in in the userIdMap db
      * @param {String} userId: String of the userid (generated by browser)
      * @returns {String} String of the user DB Id. NOT an ObjectId object
      */
     const [database,client] = await mongoDbClientConnect("mongodb://127.0.0.1:27017/", "userIdMap")
     const collection = database.collection('usermapids')
     let x = await collection.findOne({ userId: userId })
     client.close()
     return x.userDbId
 }

 async function getUserRoomByUserId(userId) {
    /**
     * Takes a user ID string and return the roomName associated with
     * @param {String} userId: String of the userid (generated by browser)
     * @returns {String} String of the user room. This should be a database name
     */
    const [database,client] = await mongoDbClientConnect("mongodb://127.0.0.1:27017/", "userIdMap")
    const collection = database.collection('usermapids')
    let x = await collection.findOne({userId: userId})
    client.close()
    return x.userRoom
 }

module.exports = { 
    getAllCollectionsInRoom,
    getAllImportantObjectsInRoom,
    getAllObjectsInRoom,
    getObjByDbIdAndRoom,
    getUserDbIdByUserId,
    getUserRoomByUserId
}
